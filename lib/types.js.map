{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/lib/types.ts"],"names":[],"mappings":"","sourcesContent":["export interface RgbColor {\r\n  r: number;\r\n  g: number;\r\n  b: number;\r\n}\r\n\r\nexport interface RgbaColor extends RgbColor {\r\n  a: number;\r\n}\r\n\r\nexport interface HslColor {\r\n  h: number;\r\n  s: number;\r\n  l: number;\r\n}\r\n\r\nexport interface HslaColor extends HslColor {\r\n  a: number;\r\n}\r\n\r\nexport interface HsvColor {\r\n  h: number;\r\n  s: number;\r\n  v: number;\r\n}\r\n\r\nexport interface HsvaColor extends HsvColor {\r\n  a: number;\r\n}\r\n\r\nexport type ObjectColor = RgbColor | HslColor | HsvColor | RgbaColor | HslaColor | HsvaColor;\r\n\r\nexport type AnyColor = string | ObjectColor;\r\n\r\nexport interface ColorModel<T extends AnyColor> {\r\n  defaultColor: T;\r\n  toHsva: (color: T) => HsvaColor;\r\n  fromHsva: (hsva: HsvaColor) => T;\r\n  equal: (first: T, second: T) => boolean;\r\n  fromAttr: (attr: string) => T;\r\n}\r\n\r\nexport interface ColorChangedEventListener<T> {\r\n  (evt: T): void;\r\n}\r\n\r\nexport interface ColorChangedEventListenerObject<T> {\r\n  handleEvent(evt: T): void;\r\n}\r\n\r\nexport interface ColorPickerEventMap<T> extends HTMLElementEventMap {\r\n  'color-changed': CustomEvent<{ value: T }>;\r\n}\r\n\r\nexport type ColorPickerEventListener<T> =\r\n  | ColorChangedEventListener<T>\r\n  | ColorChangedEventListenerObject<T>;\r\n"]}